#print('form query:')
query <- paste(
"SELECT * FROM content WHERE model='",
as.character(model),
"' ORDER BY RANDOM() LIMIT ",
limit,
';',
sep=''
)
#print('query: ', query)
dbGetQuery(connection, query)
}
random_query(con, 150, 10)
lapply(dbListConnections(drv = dbDriver("PostgreSQL")), function(x) {dbDisconnect(conn = x)})
rm(list=ls())
pw <- {
'supersowisieben'
}
drv <- dbDriver('PostgreSQL')
con <- dbConnect(
drv,
dbname = 'stmtest',
host = '192.168.2.225',
port = 5432,
user = 'rdb',
password = pw
)
rm(pw)
dbExistsTable(con, 'content')
dbGetQuery(con, "SELECT * FROM content WHERE model='150' LIMIT 10;")
DBI::dbDisconnect(con)
random_query <- function(connection, model, limit){
#print('form query:')
query <- paste(
"SELECT * FROM content WHERE model='",
as.character(model),
"' ORDER BY RANDOM() LIMIT ",
limit,
';',
sep=''
)
#print('query: ', query)
dbGetQuery(connection, query)
}
random_query(con, 150, 10)
pw <- {
'supersowisieben'
}
drv <- dbDriver('PostgreSQL')
con <- dbConnect(
drv,
dbname = 'stmtest',
host = '192.168.2.225',
port = 5432,
user = 'rdb',
password = pw
)
random_query(con, 150, 10)
DBI::dbDisconnect(con)
connect <- function(){
#print('connect:')
#RSQLite::dbConnect(RSQLite::SQLite(), db_path)
pw <- {
'supersowisieben'
}
drv <- dbDriver('PostgreSQL')
dbConnect(
drv,
dbname = 'stmtest',
host = '192.168.2.225',
port = 5432,
user = 'rdb',
password = pw
)
}
connect <- function(){
#print('connect:')
#RSQLite::dbConnect(RSQLite::SQLite(), db_path)
pw <- {
'supersowisieben'
}
drv <- dbDriver('PostgreSQL')
dbConnect(
drv,
dbname = 'stmtest',
host = '192.168.2.225',
port = 5432,
user = 'rdb',
password = pw
)
rm(pw)
}
test <- connect()
test <- connect
connect <- function(){
#print('connect:')
#RSQLite::dbConnect(RSQLite::SQLite(), db_path)
pw <- {
'supersowisieben'
}
drv <- dbDriver('PostgreSQL')
dbConnect(
drv,
dbname = 'stmtest',
host = '192.168.2.225',
port = 5432,
user = 'rdb',
password = pw
)
rm(pw)
}
test <- connect()
test <- connect()
test
disconnect <- function(connection){
#print('disconnect:')
dbDisconnect(connection)
}
test <- connect()
con <- connect()
connect <- function(){
#print('connect:')
#RSQLite::dbConnect(RSQLite::SQLite(), db_path)
pw <- {
'supersowisieben'
}
drv <- dbDriver('PostgreSQL')
dbConnect(
drv,
dbname = 'stmtest',
host = '192.168.2.225',
port = 5432,
user = 'rdb',
password = pw
)
#rm(pw)
}
test <- connect()
disconnect <- function(connection){
#print('disconnect:')
dbDisconnect(connection)
}
test <- connect()
con <- connect()
random_query <- function(connection, model, limit){
#print('form query:')
query <- paste(
"SELECT * FROM content WHERE model='",
as.character(model),
"' ORDER BY RANDOM() LIMIT ",
limit,
';',
sep=''
)
#print('query: ', query)
dbGetQuery(connection, query)
}
random_query(con, 50, 10)
rm(test)
lapply(dbListConnections(drv = dbDriver("PostgreSQL")), function(x) {dbDisconnect(conn = x)})
con <- connect()
random_query <- function(connection, model, limit){
#print('form query:')
query <- paste(
"SELECT * FROM content WHERE model='",
as.character(model),
"' ORDER BY RANDOM() LIMIT ",
limit,
';',
sep=''
)
#print('query: ', query)
dbGetQuery(connection, query)
}
random_query(con, 50, 10)
connect <- function(){
#print('connect:')
#RSQLite::dbConnect(RSQLite::SQLite(), db_path)
pw <- {
'supersowisieben'
}
drv <- dbDriver('PostgreSQL')
con <- dbConnect(
drv,
dbname = 'stmtest',
host = '192.168.2.225',
port = 5432,
user = 'rdb',
password = pw
)
rm(pw)
con
}
con <- connect()
random_query <- function(connection, model, limit){
#print('form query:')
query <- paste(
"SELECT * FROM content WHERE model='",
as.character(model),
"' ORDER BY RANDOM() LIMIT ",
limit,
';',
sep=''
)
#print('query: ', query)
dbGetQuery(connection, query)
}
random_query(con, 50, 10)
print(query)
con <- connect()
random_query <- function(connection, model, limit){
#print('form query:')
query <- paste(
"SELECT * FROM content WHERE model='",
as.character(model),
"' ORDER BY RANDOM() LIMIT ",
limit,
';',
sep=''
)
print(query)
dbGetQuery(connection, query)
}
random_query(con, 50, 10)
random_query(con, 150, 10)
runApp('stm_test')
runApp('stm_test')
shiny::runApp('stm_pub')
runApp('stm_pub')
runApp('stm_pub')
library(foreign)
library(ggplot2)
library(ggiraph)
library(ggiraphExtra)
library(MASS)
library(vcd)
library(sjPlot)
library(texreg)
library(quantreg)
library(car)
library(pscl)
library(xtable)
library(interplot)
library(modEvA)
library(lmtest)
library(sandwich)
library(lm.beta)
library(visreg)
library(jtools)
library(arrow)
library(broom)
library(olsrr)
library(gridExtra)
library(interactions)
theme_set(theme_sjplot())
path <- 'git/abd/notebooks/14_interdisciplinary_paper/'
df_ph <- read_feather(paste(path, 'physics_elite21.feather', sep=''))
install.packages('feather')
install.packages('arrow')
df_ph <- read_feather(paste(path, 'physics_elite21.feather', sep=''))
df_ph <- feather::read_feather(paste(path, 'physics_elite21.feather', sep=''))
library(arrow)
install.packages('feather')
install.packages("feather")
df_ph <- feather::read_feather(paste(path, 'physics_elite21.feather', sep=''))
df_ph <- read.csv(paste(path, 'physics_elite21.csv', sep=''))
df_ps <- read.csv(paste(path, 'psychology_elite21.csv', sep=''))
f_main <- formula(
cites_early_log ~ factor(gender) + factor(elite) + z_items_early +
z_variety + z_balance + z_disparity + z_novelty +
factor(career_start)
)
mod_ph_main <- lm(f_main, df_ph)
summary(mod_ph_main)
mod_ps_main <- lm(f_main, df_ps)
summary(mod_ps_main)
############### Main effect plot both models
include <- c(
'`factor(gender)`',
'`factor(elite)`',
'z_items_early',
'z_variety',
'z_balance',
'z_disparity',
'z_novelty'
)
names(include) <- c("gender", "elite", "N(articles)", "variety", "balance", "disparity", "novelty")
plot_summs(
mod_ph_main, mod_ps_main,
model.names = c('physics', 'psychology'),
coefs=include, legend.title='Sample', colors=c('black', 'darkgrey'),
scale=T, inner_ci_level=.95
#, inner_ci_level = .95
) + theme(axis.text.y=element_text(size=18), legend.text = element_text(size=12))
############### main models physics and psychology
mlist = list()
#r2vec <- c()
ar2vec <- c()
#aicvec <- c()
#llvec <- c()
nvec <- c()
namevec <- c()
coeflist <- list()
selist <- list()
f_list = list(c('physics', 1), c('psychology', 2))
for (i in f_list){
df <- read_feather(paste(path, i[[1]], '_new.feather', sep=''))
df <- df[df$n_items_early>1,]
mod <- lm(f_main, df)
c <- coeftest(mod, vcov = vcovHC(mod, type="HC1"))
coeflist <- c(coeflist, c)
mlist[[i[[2]]]] <- c
#  r2 <- round(summary(mod)$r.squared, 2)
ar2 <- round(summary(mod)$adj.r.squared, 2)
#  aic <- round(AIC(mod), 2)
#  ll <- round(logLik(mod), 2)
n <- nobs(mod)
#  r2vec <- c(r2vec, r2)
ar2vec <- c(ar2vec, ar2)
#  aicvec <- c(aicvec, aic)
#  llvec <- c(llvec, ll)
nvec <- c(nvec, n)
name <- paste(i[[1]], 'sample', sep=' ')
namevec <- c(namevec, name)
}
gof_rows=list(
#r2vec,
ar2vec,
#aicvec,
#llvec,
nvec
)
names(gof_rows) <- c(
#'R^2',
'Adj. R^2',
#, 'AIC', 'Log. Lik.',
'Num. Obs.'
)
#order = c(1,2,3,8)
gof_rows
cnames=c(
'(Intercept)',
'Gender', 'Elite', 'N(articles)', 'Variety', 'Balance', 'Disparity', 'Novelty',
'2007', '2008', '2009', '2010', '2011', '2012'
)
texreg(
l=mlist,
custom.gof.rows=gof_rows,
custom.model.names=namevec,
custom.coef.names=cnames,
caption='Results of the linear regressions on the logged citation count.'
)
library(texreg)
############### Main effect plot both models
include <- c(
'`factor(gender)`',
'`factor(elite)`',
'z_items_early',
'z_variety',
'z_balance',
'z_disparity',
'z_novelty'
)
names(include) <- c("gender", "elite", "N(articles)", "variety", "balance", "disparity", "novelty")
plot_summs(
mod_ph_main, mod_ps_main,
model.names = c('physics', 'psychology'),
coefs=include, legend.title='Sample', colors=c('black', 'darkgrey'),
scale=T, inner_ci_level=.95
#, inner_ci_level = .95
) + theme(axis.text.y=element_text(size=18), legend.text = element_text(size=12))
library(sjPlot)
theme_set(theme_sjplot())
devtools::install_github("strengejacke/strengejacke")
install_github("strengejacke/strengejacke")
library(devtools)
install_github("strengejacke/strengejacke")
install_github("https://github.com/strengejacke/sjPlot")
library(sjPlot)
theme_set(theme_sjplot())
############### Main effect plot both models
include <- c(
'`factor(gender)`',
'`factor(elite)`',
'z_items_early',
'z_variety',
'z_balance',
'z_disparity',
'z_novelty'
)
names(include) <- c("gender", "elite", "N(articles)", "variety", "balance", "disparity", "novelty")
plot_summs(
mod_ph_main, mod_ps_main,
model.names = c('physics', 'psychology'),
coefs=include, legend.title='Sample', colors=c('black', 'darkgrey'),
scale=T, inner_ci_level=.95
#, inner_ci_level = .95
) + theme(axis.text.y=element_text(size=18), legend.text = element_text(size=12))
library(jtools)
############### Main effect plot both models
include <- c(
'`factor(gender)`',
'`factor(elite)`',
'z_items_early',
'z_variety',
'z_balance',
'z_disparity',
'z_novelty'
)
names(include) <- c("gender", "elite", "N(articles)", "variety", "balance", "disparity", "novelty")
plot_summs(
mod_ph_main, mod_ps_main,
model.names = c('physics', 'psychology'),
coefs=include, legend.title='Sample', colors=c('black', 'darkgrey'),
scale=T, inner_ci_level=.95
#, inner_ci_level = .95
) + theme(axis.text.y=element_text(size=18), legend.text = element_text(size=12))
theme_set(theme_sjplot())
library(ggplot2)
library(foreign)
library(ggplot2)
library(ggiraph)
library(ggiraphExtra)
library(MASS)
library(vcd)
library(sjPlot)
library(texreg)
library(quantreg)
library(car)
library(pscl)
library(xtable)
library(interplot)
library(modEvA)
library(lmtest)
library(sandwich)
library(lm.beta)
library(visreg)
library(jtools)
library(arrow)
library(broom)
library(olsrr)
library(gridExtra)
library(interactions)
theme_set(theme_sjplot())
df_ph <- read_feather(paste(path, 'physics_new_corr.feather', sep=''))
df_ps <- read_feather(paste(path, 'psychology_new_corr.feather', sep=''))
df_ph <- read.csv(paste(path, 'physics_elite21.csv', sep=''))
df_ps <- read.csv(paste(path, 'psychology_elite21.csv', sep=''))
#df_ps <- df_ps[df_ps$citation_count_cum_3_early<6000,]
f_main <- formula(
cites_early_log ~ factor(gender) + factor(elite) + z_items_early +
z_variety + z_balance + z_disparity + z_novelty +
factor(career_start)
)
mod_ph_main <- lm(f_main, df_ph)
summary(mod_ph_main)
mod_ps_main <- lm(f_main, df_ps)
summary(mod_ps_main)
############### Main effect plot both models
include <- c(
'`factor(gender)`',
'`factor(elite)`',
'z_items_early',
'z_variety',
'z_balance',
'z_disparity',
'z_novelty'
)
names(include) <- c("gender", "elite", "N(articles)", "variety", "balance", "disparity", "novelty")
plot_summs(
mod_ph_main, mod_ps_main,
model.names = c('physics', 'psychology'),
coefs=include, legend.title='Sample', colors=c('black', 'darkgrey'),
scale=T, inner_ci_level=.95
#, inner_ci_level = .95
) + theme(axis.text.y=element_text(size=18), legend.text = element_text(size=12))
# install.packages(igraph)
# diverse weitere packages: sna, RSiens, ergm, statnet ...
library(igraph)
# Pfad definieren
setwd('git/abd_workshop_2021/notebooks/03-Session3/')
# Netzwerk einladen
subgraph = igraph::read_graph('subgraph.graphml', 'graphml')
rm(list=ls())
# install.packages(igraph)
# diverse weitere packages: sna, RSiens, ergm, statnet ...
library(igraph)
# Pfad definieren
setwd('git/abd_workshop_2021/notebooks/03-Session3/')
# Netzwerk einladen
subgraph = igraph::read_graph('subgraph.graphml', 'graphml')
plot(subgraph)
subgraph.centrality()
# Netzwerk einladen
sg = igraph::read_graph('subgraph.graphml', 'graphml')
rm(list=ls())
# Netzwerk einladen
sg = igraph::read_graph('subgraph.graphml', 'graphml')
igraph::get.vertex.attribute(sg, 1)
igraph::get.vertex.attribute(sg, 2)
igraph::get.vertex.attribute(sg, '29280640')
igraph::get.vertex.attribute(sg, 29280640)
igraph::get.vertex.attribute(sg, 'name', '29280640')
igraph::get.vertex.attribute(sg, 'name', 29280640)
igraph::get.vertex.attribute(sg, 'firstname', 29280640)
igraph::get.vertex.attribute(sg, 'firstname', '29280640')
igraph::get.vertex.attribute(sg, 'firstname', 1)
igraph::vertex_attr(sg)
igraph::vertex_attr(sg, index=1)
# Netzwerk einladen
sg = igraph::read_graph('subgraph.graphml', 'graphml')
igraph::vertex_attr(sg, index=1)
